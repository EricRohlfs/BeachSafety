#include <NMEAGPS.h>

//======================================================================
//  Program: NMEAsimple.ino
//
//  Description:  This program shows simple usage of NeoGPS
//
//  Prerequisites:
//     1) NMEA.ino works with your device (correct TX/RX pins and baud rate)
//     2) At least one of the RMC, GGA or GLL sentences have been enabled in NMEAGPS_cfg.h.
//     3) Your device at least one of those sentences (use NMEAorder.ino to confirm).
//     4) LAST_SENTENCE_IN_INTERVAL has been set to one of those sentences in NMEAGPS_cfg.h (use NMEAorder.ino).
//     5) LOCATION and ALTITUDE have been enabled in GPSfix_cfg.h
//
//  'Serial' is for debug output to the Serial Monitor window.
//
//  License:
//    Copyright (C) 2014-2017, SlashDevin
//
//    This file is part of NeoGPS
//
//    NeoGPS is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    NeoGPS is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with NeoGPS.  If not, see <http://www.gnu.org/licenses/>.
//
//======================================================================

#include <GPSport.h>
#include <RH_ASK.h>
#include <SPI.h> // Not actualy used but needed to compile

RH_ASK driver(2000, 2, 4, 5);

NMEAGPS  gps; // This parses the GPS characters
gps_fix  fix; // This holds on to the latest values

float llat;

void setup()
{
  //pinMode(rfTransmitPin, OUTPUT);
  if (!driver.init())
    Serial.println("rf failed");

  DEBUG_PORT.begin(9600);
  //while (!Serial)
  //  ;
  DEBUG_PORT.print( F("NMEAsimple.INO: started\n") );

  gpsPort.begin(9600);
}

//--------------------------

void loop()
{
  //String buf;
  //buf += fix.latitudeL();
  //buf += String(368890453L);
  //buf += ",";
  //buf += String(-761478978L);
  //buf += fix.longitudeL();
  //DEBUG_PORT.print("buf:");
  //DEBUG_PORT.print( buf);


  while (gps.available( gpsPort )) {
    fix = gps.read();

    DEBUG_PORT.print( F("Location: ") );
    if (fix.valid.location) {

      //DEBUG_PORT.print( fix.latitude(), 6 );
      //DEBUG_PORT.print( ',' );
      //DEBUG_PORT.print( fix.longitude(), 6 );
      //delay(500);
      String buf = String(fix.latitudeL());
      //buf += fix.longitudeL();
      char msg1[50];
      buf.toCharArray( msg1 , strlen(msg1));
      const char *msg = msg1;
      driver.send((uint8_t *)msg, strlen(msg));
      driver.waitPacketSent();
      //buf += "lat:";
      buf = fix.longitudeL();
      buf.toCharArray( msg1 , strlen(msg1));
      const char *msglat = msg1;
      driver.send((uint8_t *)msglat, strlen(msglat));
      driver.waitPacketSent();
      DEBUG_PORT.print(msg);
      delay(200);
      
      //llat = fix.latitude();

      //String buf;
      //buf += llat;
      //buf += String(368890453L);
      //buf += ",";
      //buf += String(-761478978L);
      //buf += llong;
      //DEBUG_PORT.print("buf:");
      //DEBUG_PORT.print( buf);

      //char msg1[25];
      //buf.toCharArray(msg1 , strlen(msg1));


    }



    //DEBUG_PORT.print( F(", Altitude: ") );
    //if (fix.valid.altitude)
    //  DEBUG_PORT.print( fix.altitude() );

    DEBUG_PORT.println();
  }
}


// ask_receiver.pde
// -*- mode: C++ -*-
// Simple example of how to use RadioHead to receive messages
// with a simple ASK transmitter in a very simple way.
// Implements a simplex (one-way) receiver with an Rx-B1 module

#include <RH_ASK.h>
#include <SPI.h> // Not actualy used but needed to compile


RH_ASK driver(2000, 2, 4, 5); // ESP8266 or ESP32: do not use pin 11

void setup()
{
    Serial.begin(9600);	// Debugging only
    Serial.println("starting2");
    if (!driver.init())
         Serial.println("init failed");
         
}

void loop()
{
    uint8_t buf[RH_ASK_MAX_MESSAGE_LEN];
    uint8_t buflen = sizeof(buf);

    if (driver.recv(buf, &buflen)) // Non-blocking
    {
	int i;

	// Message with a good checksum received, dump it.
	driver.printBuffer("Got:", buf, buflen);
    }
}
